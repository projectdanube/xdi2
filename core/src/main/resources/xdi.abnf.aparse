xdi-graph               = xdi-statement *( CRLF xdi-statement ) ;
xdi-statement           = contextual-statement / relational-statement / literal-statement ;

contextual-statement    = direct-contextual / inverse-contextual ;
direct-contextual       = absolute / peer-relative / context-relative / class-relative ;
inverse-contextual      = absolute-inverse / peer-inverse  / context-inverse / class-inverse ;

absolute                =          local-root "/()/" context ;
peer-relative           =           peer-root "/()/" context ;
context-relative        =             context "/()/" relative-context ;
class-relative          =       class-context "/()/" instance-context ;
absolute-inverse        =          context "/$is()/" local-root ;
peer-inverse            =          context "/$is()/" peer-root ;
context-inverse         = relative-context "/$is()/" context ;
class-inverse           = instance-context "/$is()/" class-context ;

relational-statement    = inverse-relational / direct-relational / inner-relational ;
direct-relational       = context "/"    context "/" context ;
inverse-relational      = context "/$is" context "/" context ;
inner-relational        = context "/"    context "/" inner-statement ;

inner-statement         = "(" xdi-statement ")" ;

literal-statement       = literal-context value-context "/<>/" json-value ;

context                 = ( peer-root [ relative-context ] ) / relative-context ;
relative-context        = 1*subpath ;

class-context           = [ peer-root ] class-path ;
class-path              = ( subpath class-path ) / class ;

instance-context        = ( instance / element ) [ relative-context ] ;

literal-context         = [ peer-root ] literal-path ;
literal-path            = ( subpath literal-path ) / attribute-singleton / attribute-pair ;
attribute-pair          = attribute-class ( instance / element ) ;

value-context           = "<<" 1*type-class ">>" ;

root                    = local-root / peer-root / inner-root ;
local-root              = "()" ;
peer-root               = "(" ( context / iri-chars ) ")" ;
inner-root              = "(" context "/" context ")" ;

xref                    = "(" ( context / iri-chars / xdi-chars ) ")" ;

subpath                 = singleton / ( class [ instance / element ] ) ;
subsegment              = singleton / class / instance / element / root / inner-statement ;

singleton               = entity-singleton / attribute-singleton / person-singleton / organization-singleton / relative-singleton ;
entity-singleton        = "!(" type-class ")" ;
attribute-singleton     = "!<" type-class ">" ;
person-singleton        = "=" ( xref / xdi-chars ) ;
organization-singleton  = "@" ( xref / xdi-chars ) ;
relative-singleton      = "*" [ xref / uuid-literal / ipv6-literal / xdi-chars ] ;

class                   = entity-class / attribute-class ;

entity-class            = type-class / instance-class ;
type-class              = specific / generic ;
instance-class          = person / organization ;
specific                = "$" [ xref / xdi-chars ] ;
generic                 = "+" [ xref / xdi-chars ] ;
person                  = "=" ;
organization            = "@" ;

attribute-class         = "<" type-class ">" ;

instance                = "!" [ xref / uuid-literal / ipv6-literal / xdi-chars ] ;

element                 = "[" 1*DIGIT "]" ;

json-value              = json-string / json-number / json-boolean / json-array / json-object ;
json-string             = DQUOTE *xdi-chars DQUOTE ;   #needs real JSON ABNF
json-number             = 1*DIGIT ;                    #needs real JSON ABNF
json-boolean            = "true" / "false" ;
json-array              = "[" *xdi-char "]" ;          #needs real JSON ABNF
json-object             = "{" *xdi-char "}" ;          #needs real JSON ABNF

ipv6-literal            = ":ipv6:" 4HEXDIG 7*( ":" 4HEXDIG ) ;

uuid-literal            = ":uuid:" time-low "-" time-mid "-" time-high "-" clock-seq clock-seq-low "-" node ;
time-low                = 8HEXDIG ;
time-mid                = 4HEXDIG ;
time-high               = 4HEXDIG ;   # includes version
clock-seq               = 2HEXDIG ;   # includes reserved
clock-seq-low           = 2HEXDIG ;
node                    = 12HEXDIG ;

xdi-chars               = 1*( xdi-char / ":" ) ;

iri-chars               = xdi-char / context-symbol / nonparen-delim ; # "(" and ")" are excluded
nonparen-delim          = "/" / "?" / "#" / "[" / "]" / "'" / "," ;    # double quote included?
context-symbol          = "!" / "*" / "=" / "@" / "+" / "$" ;
xdi-char                = ALPHA / DIGIT / "-" / "." / "_" / "~" / %x80-EFFFD ; # is there a way to leave high end open?
ALPHA                   = %x41-5A / %x61-7A ;   # A-Z, a-z
DIGIT                   = %x30-39 ;             # 0-9
HEXDIG                  = %x30-39 / %x41-46 ;   # 0-9, A-F
CRLF                    = %x0D / %x0A / ( %x0D %x0A ) ;
DQUOTE                  = %x22 ;
