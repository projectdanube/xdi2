#
# This file contains all XRI 3.0 syntax rules from the following page:
# http://wiki.oasis-open.org/xri/XriThree/SyntaxAbnf
#
# It also contains rule from The XDI Graph Model document, dated 2012-04-12:
# http://www.oasis-open.org/committees/download.php/45708/xdi-graph-model-2012-04-12.pdf
#
# A few modifications have been made to the rules in order to be compatible with 
# Java and the aparse library:
#
# 1) aParse requires that ; is used to signal the end of a rule.
# 2) aParse requires that # is used for comments.
# 3) aParse doesn't support prose-val. the "ipath-empty" rule has been adjusted accordingly.
# 4) aParse requires that the case of rule names and rule references must match. References
#    to the IRI rule have been adjusted accordingly.
# 5) aParse doesn't support "backtracking". As soon as a lower level rule succeeds in one
#    way, aParse never tries to match it in a different way, even if that may be required
#    for successfully matching a higher level rule. This causes a problem in the xref and
#    xref-value rules. The xref rule has therefore been adjusted, and the xref-value rule
#    has been replaced with the three rules xref-empty, xref-xri-reference and xref-IRI.
# 6) Java regular expressions only support the BMP of unicode. the "ucschar" and "iprivate"
#    rules have been adjusted accordingly.
# 7) In the xdi-xref rule, xdi-xref-IRI and xdi-xref-address have been swapped.
# 8) In the xdi-address rule, xdi-statement and xdi-node have been swapped.
#
#
# =markus 11-16-2012
#

#
# XDI rules
#

xdi-address = xdi-statement / xdi-context;
xdi-context = xdi-segment ;
xdi-statement = xdi-subject "/" xdi-predicate "/" xdi-object ;
xdi-subject = xdi-segment ;
xdi-predicate = xdi-segment ;
xdi-object = xdi-segment ;
xdi-segment = ( literal / xdi-subseg ) *xdi-subseg ;
xdi-subseg = xdi-global-subseg / xdi-local-subseg / xdi-xref ;
xdi-global-subseg = gcs-char [ xdi-local-subseg / xdi-xref / literal ] ;
xdi-local-subseg = lcs-char [ xdi-xref / literal ] ;
xdi-xref = xdi-xref-empty / xdi-xref-IRI / xdi-xref-address;
xdi-xref-empty = "()" ;
xdi-xref-IRI = "(" IRI ")" ;
xdi-xref-address = "(" xdi-address ")" ;

#
# XRI rules
#

xri               = xri-hier-part [ "?" iquery ] [ "#" ifragment ] ;
xri-reference     = xri
                  / relative-xri-ref ;
relative-xri-ref  = relative-xri-part [ "?" iquery ] [ "#" ifragment ] ;
relative-xri-part = xri-path-abs
                  / xri-path-noscheme
                  / ipath-empty ;
xri-hier-part     = xri-authority xri-path-abempty ;
xri-authority     = global-subseg *subseg ;
subseg            = global-subseg
                  / local-subseg
                  / xref ;
global-subseg     = gcs-char [ local-subseg / xref / literal ] ;
local-subseg      = lcs-char [ xref / literal ] ;
gcs-char          = "=" / "@" / "+" / "$" ;
lcs-char          = "*" / "!" ;
literal           = 1*xri-pchar ;
literal-nc        = 1*xri-pchar-nc ;
xref              = xref-empty / xref-xri-reference / xref-IRI;
xref-empty        = "()" ;
xref-xri-reference = "(" xri-reference ")" ;
xref-IRI          = "(" IRI ")" ;
xri-path          = xri-path-abempty
                  / xri-path-abs
                  / xri-path-noscheme
                  / ipath-empty ;
xri-path-abempty  = *( "/" xri-segment ) ;
xri-path-abs      = "/" [ xri-segment-nz *( "/" xri-segment ) ] ;
xri-path-noscheme = xri-segment-nc *( "/" xri-segment ) ;
xri-segment       = [ literal ] *subseg ;
xri-segment-nz    = ( literal / subseg ) *subseg ;
xri-segment-nc    = ( literal-nc / subseg ) *subseg ;
xri-pchar         = iunreserved / pct-encoded / xri-sub-delims / ":" ;
xri-pchar-nc      = iunreserved / pct-encoded / xri-sub-delims ;
xri-reserved      = xri-gen-delims / xri-sub-delims ;
xri-gen-delims    = ":" / "/" / "?" / "#" / "[" / "]" / "(" / ")"
                  / gcs-char / lcs-char ;
xri-sub-delims    = "&" / ";" / "," / "'" ;

#
# IRI rules
#

IRI               = scheme ":" ihier-part [ "?" iquery ]
                  [ "#" ifragment ] ;
scheme            = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." ) ;
ihier-part        = "//" iauthority ipath-abempty
                  / ipath-abs
                  / ipath-rootless
                  / ipath-empty ;
iauthority        = [ iuserinfo "@" ] ihost [ ":" port ] ;
iuserinfo         = *( iunreserved / pct-encoded / sub-delims / ":" ) ;
ihost             = IP-literal / IPv4address / ireg-name ;
IP-literal        = "[" ( IPv6address / IPvFuture  ) "]" ;
IPvFuture         = "v" 1*HEXDIG "." 1*( unreserved / sub-delims / ":" ) ;
IPv6address       =                            6( h16 ":" ) ls32
                  /                       "::" 5( h16 ":" ) ls32
                  / [               h16 ] "::" 4( h16 ":" ) ls32
                  / [ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
                  / [ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
                  / [ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
                  / [ *4( h16 ":" ) h16 ] "::"              ls32
                  / [ *5( h16 ":" ) h16 ] "::"              h16
                  / [ *6( h16 ":" ) h16 ] "::" ;
ls32              = ( h16 ":" h16 ) / IPv4address ;
h16               = 1*4HEXDIG ;
IPv4address       = dec-octet "." dec-octet "." dec-octet "." dec-octet ;
dec-octet         = DIGIT                # 0-9
                  / %x31-39 DIGIT        # 10-99
                  / "1" 2DIGIT           # 100-199
                  / "2" %x30-34 DIGIT    # 200-249
                  / "25" %x30-35 ;       # 250-255
ireg-name         = *( iunreserved / pct-encoded / sub-delims ) ;
port              = *DIGIT ;
ipath-abempty     = *( "/" isegment ) ;
ipath-abs         = "/" [ isegment-nz *( "/" isegment ) ] ;
ipath-rootless    = isegment-nz *( "/" isegment ) ;
ipath-empty       = "" ;
isegment          = *ipchar ;
isegment-nz       = 1*ipchar ;
iquery            = *( ipchar / iprivate / "/" / "?" ) ;
iprivate          = %xE000-F8FF ;
ifragment         = *( ipchar / "/" / "?" ) ;
ipchar            = iunreserved / pct-encoded / sub-delims / ":" / "@" ;
iunreserved       = ALPHA / DIGIT / "-" / "." / "_" / "~" / ucschar ;
pct-encoded       = "%" HEXDIG HEXDIG ;
ucschar           = %xA0-D7FF / %xF900-FDCF / %xFDF0-FFEF ;
reserved          = gen-delims / sub-delims ;
gen-delims        = ":" / "/" / "?" / "#" / "[" / "]" / "@" ;
sub-delims        = "!" / "$" / "&" / "'" 
                  / "*" / "+" / "," / ";" / "=" ;
unreserved        = ALPHA / DIGIT / "-" / "." / "_" / "~" ;

#
# ABNF core rules
#

ALPHA          =  %x41-5A / %x61-7A ; 		# A-Z / a-z
BIT            =  "0" / "1" ;
CHAR           =  %x01-7F ; 				# any 7-bit US-ASCII character, excluding NUL
CR             =  %x0D ;					# carriage return
CRLF           =  CR LF ;					# Internet standard newline
CTL            =  %x00-1F / %x7F ;			# controls
DIGIT          =  %x30-39 ; 				# 0-9
DQUOTE         =  %x22 ;					# " (Double Quote)
HEXDIG         =  DIGIT / "A" / "B" / "C" / "D" / "E" / "F" ;
HTAB           =  %x09 ;					# horizontal tab
LF             =  %x0A ;					# linefeed
LWSP           =  *(WSP / CRLF WSP) ;		# linear white space (past newline)
OCTET          =  %x00-FF ;					# 8 bits of data
SP             =  %x20 ;					# space
VCHAR          =  %x21-7E ;					# visible (printing) characters
WSP            =  SP / HTAB ;				# white space
